library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

use work.itc.all;
use work.itc_lcd.all;

entity gen_font is
	port (
		x                                                       : in integer range 0 to 127;
		y                                                       : in integer range 0 to 159;
		font_start                                              : in std_logic;
		font_done                                               : in std_logic;
		q                                                       : out std_logic;
		address                                                 : out std_logic_vector(15 downto 0);
		clk, rst_n                                              : in std_logic;
		lcd_sclk, lcd_mosi, lcd_ss_n, lcd_dc, lcd_bl, lcd_rst_n : out std_logic
	);
end gen_font;

architecture arch of gen_font is
	signal start_drawã€€ : std_logic;
	signal l_addr : l_addr_t;
	signal l_data : l_px_t;
	signal wr_ena : std_logic;
	signal data : string(1 to 3) := "ABC";
begin
	edge_inst : entity work.edge(arch)
		port map(
			clk     => clk,
			rst_n   => rst_n,
			sig_in  => font_start,
			rising  => start_draw,
			falling => open
		);
	lcd_inst : entity work.lcd(arch)
		port map(
			clk        => clk,
			rst_n      => rst_n,
			lcd_sclk   => lcd_sclk,
			lcd_mosi   => lcd_mosi,
			lcd_ss_n   => lcd_ss_n,
			lcd_dc     => lcd_dc,
			lcd_bl     => lcd_bl,
			lcd_rst_n  => lcd_rst_n,
			brightness => 100,
			wr_ena     => wr_ena,
			addr       => l_addr,
			data       => l_data
		);

	process (clk, rst_n)
	begin
		if (rst_n = '0') then
			wr_ena <= '0';
			l_addr <= 0;
		elsif rising_edge(clk) then
			if (start_draw = '1') then

			end if;
		end if;
	end process;

end arch;
